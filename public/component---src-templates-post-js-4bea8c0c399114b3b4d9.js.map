{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/templates/post.js"],"names":["SEO","description","lang","meta","title","site","metaDescription","siteMetadata","Helmet","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","Template","product","data","shopifyProduct","vendor","images","map","image","fluid","localFile","childImageSharp","key","id","alt","dangerouslySetInnerHTML","__html","descriptionHtml","query"],"mappings":"mOAYA,SAASA,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAC9BC,EADuC,OACvCA,KAcFC,EAAkBL,GAAeI,EAAKE,aAAaN,YAEzD,OACE,kBAACO,EAAA,EAAD,CACEC,eAAgB,CACdP,QAEFE,MAAOA,EACPM,cAAa,QAAUL,EAAKE,aAAaH,MACzCD,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAASR,GAEX,CACES,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASP,EAAKE,aAAaO,QAE7B,CACEH,KAAK,gBACLC,QAASR,GAEX,CACEO,KAAK,sBACLC,QAASN,IAEXS,OAAOZ,KAKfH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,Q,iCCjFA,SAASiB,EAAT,GAA6B,IACpCC,EADmC,EAARC,KACZC,eAErB,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAKhB,MAAOc,EAAQG,SAEnBH,EAAQI,OAAOC,KAAI,SAAAC,GAAK,OACvB,kBAAC,IAAD,CACEC,MAAOD,EAAME,UAAUC,gBAAgBF,MACvCG,IAAKJ,EAAMK,GACXC,IAAKZ,EAAQd,WAIjB,4BAAKc,EAAQd,OAEb,4BAAKc,EAAQG,QAEb,yBAAKU,wBAAyB,CAAEC,OAAQd,EAAQe,qBAMjD,IAAMC,EAAK","file":"component---src-templates-post-js-4bea8c0c399114b3b4d9.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s â€“ ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport SEO from \"../components/SEO\"\nimport Layout from \"../layouts/default\"\nimport Img from \"gatsby-image\"\n\nexport default function Template({ data }) {\n  const product = data.shopifyProduct\n\n  return (\n    <>\n      <Layout>\n        <SEO title={product.vendor} />\n\n        {product.images.map(image => (\n          <Img\n            fluid={image.localFile.childImageSharp.fluid}\n            key={image.id}\n            alt={product.title}\n          />\n        ))}\n\n        <h1>{product.title}</h1>\n\n        <h2>{product.vendor}</h2>\n\n        <div dangerouslySetInnerHTML={{ __html: product.descriptionHtml }} />\n      </Layout>\n    </>\n  )\n}\n\nexport const query = graphql`\n  query ProjectPage($handle: String!) {\n    shopifyProduct(handle: { eq: $handle }) {\n      title\n      vendor\n      descriptionHtml\n      images {\n        localFile {\n          childImageSharp {\n            fluid(maxWidth: 1000) {\n              ...GatsbyImageSharpFluid_withWebp\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}